# 1. Importación de librerías necesarias
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
import joblib

# 2. Carga de datos
# -------------------------------------------------
datos = pd.read_csv('comprar_alquilar.csv')

print("Primeras filas del dataset:")
print(datos.head())

print("\nInformación del dataset:")
print(datos.info())

print("\nEstadísticas descriptivas:")
print(datos.describe())

print("\nDistribución de la variable 'comprar':")
print(datos['comprar'].value_counts())

# 3. Preprocesamiento de datos
# -------------------------------------------------
datos = pd.get_dummies(datos, columns=['estado_civil', 'trabajo'], drop_first=True)

X = datos.drop('comprar', axis=1)
y = datos['comprar']

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# 4. Reducción de dimensionalidad con PCA (2 componentes)
# -------------------------------------------------
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_scaled)

print("\nVarianza explicada por cada componente:")
print(pca.explained_variance_ratio_)

# 5. Visualización de resultados PCA
# -------------------------------------------------
plt.figure(figsize=(10, 7))
plt.scatter(X_pca[:, 0], X_pca[:, 1], c=y, cmap='viridis', alpha=0.7)
plt.title('Visualización PCA (2 Componentes)')
plt.xlabel('Componente Principal 1')
plt.ylabel('Componente Principal 2')
plt.colorbar(label='Comprar (1) / Alquilar (0)')
plt.grid()
plt.show()

# 6. Análisis de clustering (K-Means)
# -------------------------------------------------
kmeans = KMeans(n_clusters=2, random_state=42)
clusters = kmeans.fit_predict(X_pca)

plt.figure(figsize=(10, 7))
plt.scatter(X_pca[:, 0], X_pca[:, 1], c=clusters, cmap='tab10', alpha=0.7)
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], 
            s=200, c='red', marker='X', label='Centroides')
plt.title('Clustering en Espacio PCA')
plt.xlabel('Componente Principal 1')
plt.ylabel('Componente Principal 2')
plt.legend()
plt.grid()
plt.show()

# 7. Interpretación de componentes
# -------------------------------------------------
componentes = pd.DataFrame(pca.components_, 
                          columns=X.columns,
                          index=['PC1', 'PC2'])
print("\nCargas de los componentes principales:")
print(componentes)

# 8. Guardado de modelos
# -------------------------------------------------
joblib.dump(pca, 'pca_model.pkl')
joblib.dump(scaler, 'scaler.pkl')
joblib.dump(kmeans, 'kmeans_model.pkl')

print("\nModelos guardados exitosamente:")
print("- pca_model.pkl (modelo PCA)")
print("- scaler.pkl (normalizador)")
print("- kmeans_model.pkl (modelo K-Means)")

# 9. Gráfico adicional: Varianza explicada acumulada
# -------------------------------------------------
pca_full = PCA().fit(X_scaled)
plt.figure(figsize=(10, 6))
plt.plot(np.cumsum(pca_full.explained_variance_ratio_))
plt.title('Varianza Acumulada Explicada')
plt.xlabel('Número de Componentes')
plt.ylabel('Varianza Acumulada')
plt.grid()
plt.show()